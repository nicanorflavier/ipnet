name: Pylint, Pytest, Black, and Build (Ubuntu, Windows)

on: [push]

jobs:
  setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build toml
        python -m build
    - name: Extract ipnet version
      id: get_version
      run: |
        echo "VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")" > version.txt
        echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
  
    - name: Save version as artifact
      uses: actions/upload-artifact@v4
      with:
        name: version
        path: version.txt

  check-formatting:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
    - name: Install Black
      run: |
        pip install black
    - name: Check code formatting with Black
      run: |
        black --check .

  analyse-code:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
    - name: Install Pylint and dependencies
      run: |
        pip install pylint colorama pytest
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')

  run-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
    - name: Install Pytest and dependencies
      run: |
        pip install pytest colorama
    - name: Run tests with pytest
      run: |
        pytest

  build-binaries:
    needs: [setup, check-formatting, analyse-code, run-tests]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        architecture: [x64]
    steps:
    - uses: actions/checkout@v4
    - name: Download version artifact
      uses: actions/download-artifact@v2
      with:
        name: version
    - id: get_version
      run: |
        echo "::set-output name=version::$(cat version.txt)"
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    - name: Build binary
      run: |
        pyinstaller --onefile --hidden-import=colorama src/ipnet.py
    
    - name: Calculate checksum Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sha256sum dist/ipnet* > checksum.txt

    - name: Calculate checksum Windows
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        if ("${{ runner.os }}" -eq "Windows") {
          CertUtil -hashfile dist/ipnet* SHA256 | findstr /v "hash" > checksum.txt
        } else {
          sha256sum dist/ipnet* > checksum.txt
        }      
          
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ipnet-${{ env.VERSION }}-${{ runner.os }}-python-${{ matrix.python-version }}.zip
        path: dist/ipnet*
    - name: Upload checksum
      uses: actions/upload-artifact@v4
      with:
        name: checksum-${{ matrix.os }}-${{ matrix.python-version }}
        path: checksum.txt